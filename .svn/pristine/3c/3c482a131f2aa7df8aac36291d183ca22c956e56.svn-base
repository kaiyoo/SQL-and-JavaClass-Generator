package select;

import java.io.StringWriter;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;

import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;

import main.MainController;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCodeCombination;
import javafx.scene.input.KeyCombination;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class SelectController implements Initializable {
   public Stage currentStage;
   public MainController mainController;
   String[] columnName1 = null;
   String[] columnName = null;
   String[] columnValues = null;   
   Label[] lb = null;
   TextField[] tf = null;
   CheckBox[] cb = null;
   int columnLength;   

   @FXML private Button btnCancel;
   @FXML private Button btnSelect;
   @FXML private VBox vbox4;
   @FXML private HBox hbox2;

   /**
 * 1. 메소드명 : exitSelect
 * 2. 작성일 : 2015. 8. 22. 오후 2:45:56
 * 3. 작성자 : 주용민
 * 4. 설명 :   select팝업 창에서 esc키를 누르면 취소버튼 누른 것과같은 기능
 * @param event
 */
@FXML
   void exitSelect(KeyEvent event) {
	   final KeyCombination key = new KeyCodeCombination(KeyCode.ESCAPE);
		if(key.match(event)) {
			cancel(null);
		}
   }
   
   @FXML
   void cancel(ActionEvent event) {
      this.currentStage.close();
   }

   /**
    * 
    * 1. 메소드명 : insert 
    * 2. 작성일 : 2015. 8. 20. 오후 3:12:30 
    * 3. 작성자 : pc01 유홍상 
    * 4. 설명 : select 조회시 쿼리문 띄움     
    * @param event
    */
   @FXML
   void select(ActionEvent event) {
      VelocityEngine ve = new VelocityEngine();
      ve.setProperty("resource.loader", "classpath");
      ve.setProperty("classpath.resource.loader.class", ClasspathResourceLoader.class.getName());
      ve.setProperty("input.encoding", "UTF-8");
      ve.init();

      // 이제 템플릿 파일을 읽어보자.
      Template t = ve.getTemplate("/template/select.vm");
      
      for (int j = 0; j < tf.length; j++) {
  		columnValues[j] = tf[j].getText();
      }  
      
		
      for (int i = 0; i < cb.length; i++) {
		if (cb[i].isSelected()) {
            columnName1[i] = cb[i].getText();
		}     
      }

      // 템플릿에 던져줄 데이터 만들기
      Map<String, Object> map = new HashMap<String, Object>();
      map.put("tableName", mainController.getTblTableInfo()); // 테이블명 입력
      map.put("columnName1", columnName1);
      map.put("columnName", columnName); // 컬럼 이름 입력
      map.put("columnValues", columnValues); // 컬럽 값 입력.
      map.put("columnLength", columnLength);

      VelocityContext context = new VelocityContext(map);

      StringWriter writer = new StringWriter();
      t.merge(context, writer); // 이제 템플릿과 데이터를 합치자

      mainController.setTxtPreView(writer.toString()); // 쿼리문을 소스창ㅇㅔ 뿌린다.
      
      System.out.println(writer.toString());
      
      this.currentStage.close();
   }

   //---------------------------------------------------------------------------------------------------------------------------------------
   
   
   public void base(String tableName) throws Exception {
      Connection conn = config.DBConnect.connect(); // db연동
      Statement stmt = null;
      ResultSet rs = null;
      ResultSetMetaData rsmd;
      stmt = conn.createStatement();

      String sql = "select * from " + tableName; 	// 선택한 db table 설정

      rs = stmt.executeQuery(sql);
      rsmd = rs.getMetaData();
      columnLength = rsmd.getColumnCount();

      lb = new Label[columnLength];
      tf = new TextField[columnLength];

      columnName1 = new String[columnLength];     
      columnName = new String[columnLength];       // 컬럼이름의 크기를 컬럼의 개수로 지정
     
//      for (int j = 0; j < columnLength; j++) {    //컬럼이름을 배열에 저장함
//       	  columnName1[j] = rsmd.getColumnName(j + 1);
//      }
      
      for (int j = 0; j < columnLength; j++) {    //컬럼이름을 배열에 저장함
    	  columnName[j] = rsmd.getColumnName(j + 1);
      }
      
      columnValues = new String[columnLength];      
     

      for (int i = 0; i < columnLength; i++) {
         String name = rsmd.getColumnName(i + 1);
         lb[i] = new Label(name);
         tf[i] = new TextField(); // 라벨 생성
         tf[i].setId(name);        

         
         cb = new CheckBox[columnLength];       
         cb[i].setId(name);    
         columnName1[i] = cb[i].getId();
         
         vbox4.getChildren().add(lb[i]);
         vbox4.getChildren().add(tf[i]);
         vbox4.getChildren().add(cb[i]);        
         
         
         //tf[i].setPrefColumnCount(3); // 왜안되니...


         //vbox4.setSpacing(6);
         
      }
   }

   @Override
   public void initialize(URL arg0, ResourceBundle arg1) {

   }
}