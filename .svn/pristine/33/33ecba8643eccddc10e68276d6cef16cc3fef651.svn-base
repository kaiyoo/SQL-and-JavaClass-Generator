package main;

import file.FileController;
import insert.InsertController;

import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ResourceBundle;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.util.Callback;
import login.LoginController;
import login.LoginDto;

import org.apache.log4j.Logger;

import config.DBConnect;

public class MainController implements Initializable {

	@FXML private Button btnLogin;
	@FXML private Button btnLogout;
	@FXML private Button btnFile;
	@FXML private Button btnInsert;
	@FXML private Button btnSelect;
	@FXML private Button btnUpdate;
	@FXML private Button btnDelete;
	@FXML private Button btnCommit;
	@FXML private Button btnRollback;
	@FXML private Button btnRun;
	@FXML private Label lblInfo;
	@FXML private TextArea txtPreView;
	@FXML private TableView tblDataGrid;
	@FXML private TableView<MainVo> tblTableInfo;
	@FXML private TableColumn<MainVo, String> tableName;

	public int flag = 0; // 로그인의 여부를 나타내는 값(로그인안되있을시 0,로그인시 1)
	private int num; // 테이블의 컬럼의 갯수를 저장 해논 값
	// log4j 설정
	private static final Logger LOG = Logger.getLogger(LoginDto.class);
	
	@FXML
	void openLoginPopup(ActionEvent event) {
		Stage dialog = new Stage(StageStyle.UTILITY);
		dialog.initModality(Modality.APPLICATION_MODAL);
		dialog.setTitle("접속정보");

		FXMLLoader loader = new FXMLLoader(getClass().getResource("/login/login.fxml"));

		Parent parent = null;
		
		try {
			parent = loader.load();
		} catch (Exception e) {
			e.printStackTrace();
		}

		dialog.setScene(new Scene(parent));
		dialog.setResizable(false);
		dialog.show();

		LoginController loginController = (LoginController)loader.getController();
		loginController.currentStage = dialog;   // stage 정보를 넘겨줌
		loginController.mainController = this; // 부모창(MemberController)의 정보를 넘겨줌

	}

	@FXML
	void logout(ActionEvent event) {
		flag = 0;
		init();
	}
	@FXML
	void insert(ActionEvent event) {
		Stage dialog = new Stage(StageStyle.UTILITY);
		dialog.initModality(Modality.APPLICATION_MODAL);
		dialog.setTitle("인서트");

		FXMLLoader loader = new FXMLLoader(getClass().getResource("/insert/insert.fxml"));

		Parent parent = null;

		try {
			parent = loader.load();
		} catch (Exception e) {
			e.printStackTrace();
		}

		dialog.setScene(new Scene(parent));
		dialog.setResizable(false);
		dialog.show();
		
		InsertController insertCon=(InsertController)loader.getController();
		insertCon.currentStage = dialog; 
		insertCon.mainController = this; 
	}

	@FXML
	void select(ActionEvent event) {

	}

	@FXML
	void update(ActionEvent event) {
		Stage dialog = new Stage(StageStyle.UTILITY);
		dialog.initModality(Modality.APPLICATION_MODAL);
		dialog.setTitle("파일 생성");

		FXMLLoader loader = new FXMLLoader(getClass().getResource(
				"/update/update.fxml"));

		Parent parent = null;

		try {
			parent = loader.load();
		} catch (Exception e) {
			e.printStackTrace();
		}

		dialog.setScene(new Scene(parent));
		dialog.setResizable(false);
		dialog.show();

	}

	@FXML
	void delete(ActionEvent event) {

	}

	@FXML
	void commit(ActionEvent event) {

	}

	@FXML
	void rollback(ActionEvent event) {

	}

	@FXML
	void run(ActionEvent event) {

	}

	/**
	 * 1. 메소드명 : file
	 * 2. 작성일 : 2015. 8. 19. 오후 3:58:20
	 * 3. 작성자 : 박훈범
	 * 4. 설명 :	file 생성 창 팝업 버튼
	 * @param event
	 */
	@FXML
	void file(ActionEvent event){
		Stage dialog = new Stage(StageStyle.UTILITY);
		dialog.initModality(Modality.APPLICATION_MODAL);
		dialog.setTitle("파일 생성");

		FXMLLoader loader = new FXMLLoader(getClass().getResource("/file/file.fxml"));

		Parent parent = null;

		try {
			parent = loader.load();
		} catch (Exception e) {
			e.printStackTrace();
		}

		dialog.setScene(new Scene(parent));
		dialog.setResizable(false);
		dialog.show();
		
		FileController fileController = (FileController)loader.getController();
		fileController.currentStage = dialog; 
		fileController.mainController = this; 

	}
	
	

	@SuppressWarnings("unchecked")
	private void setTable() throws SQLException {
		Connection conn = DBConnect.connect();
		Statement stmt = null;
		ResultSet rs = null;
		
		try {
			stmt = conn.createStatement();
			String sql = "select * from tab";

			rs = stmt.executeQuery(sql);
			ObservableList<MainVo> rowlist = FXCollections
					.observableArrayList();

			//if (flag == 1) {
				while (rs.next()) {
					MainVo temp = new MainVo(rs.getString(1));
					rowlist.add(temp);
					tableName.setCellValueFactory(new PropertyValueFactory<MainVo, String>("tableName"));
					tblTableInfo.setItems(rowlist);
				}
				clickTable();

			//}
		} catch (Exception e) {
			e.printStackTrace();
		}		

	}
	
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void setColTable(String tstr) {

		Connection conn;
		try {
			conn = DBConnect.connect();
			tblDataGrid.getColumns().clear();
			String sql = "select * from " + tstr;
			ResultSet rs = conn.createStatement().executeQuery(sql);
			num = rs.getMetaData().getColumnCount();
			ObservableList col = FXCollections.observableArrayList();
			ObservableList<ObservableList> row = FXCollections.observableArrayList();
			
			for (int i = 0; i < num; i++) {
				col.add(rs.getMetaData().getColumnName(i + 1));
			}
			
			// row 생성 값 이 null 일시 ""로 출력
			while (rs.next()) {
				ObservableList rowlist = FXCollections.observableArrayList();

				for (int i = 1; i <= num; i++) {
					String str = null;
					if (rs.getString(i) == null) {
						str = "";
						// null 시 ""빈칸을 출력
					} else {
						str = rs.getString(i);
					}
					rowlist.add(str);
				}
				row.add(rowlist);
			}

			for (int i = 0; i < num; i++) {
				final int j = i;
				TableColumn tableCol = new TableColumn(col.get(i).toString());
				tableCol.setCellValueFactory(new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {

					public ObservableValue<String> call(
							CellDataFeatures<ObservableList, String> param) {
						return new SimpleStringProperty(param.getValue().get(j).toString());
					}
				});
				
				// sql의 필드명 을 table 에 추가
				tblDataGrid.getColumns().addAll(tableCol);
			}
			
			// 테이블에 row 값
			tblDataGrid.setItems(row);
		} catch (SQLException e) {
			e.printStackTrace();
		}

	}
	
	void clickTable() {
		tblTableInfo.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<MainVo>() {
			@Override
			public void changed(
					ObservableValue<? extends MainVo> observable,
					MainVo oldValue, MainVo newValue) {

				try {
					// 선택된 테이블명으로 데이터 그리드에 출력
					setColTable(tblTableInfo.getSelectionModel().getSelectedItem().getTableName());
				} catch (Exception e) {
					e.printStackTrace();
				}

			}
		});
	}

	
	/**
	 * 1. 메소드명 : getTblTableInfo
	 * 2. 작성일 : 2015. 8. 20. 오후 7:34:35
	 * 3. 작성자 : Jaeryeon Yang
	 * 4. 설명 : 선택된 테이블명 vo 리턴
	 * @return
	 */
	public MainVo getTblTableInfo() {
		MainVo vo = tblTableInfo.getSelectionModel().getSelectedItem(); 
		return vo;
	}
	
	public void setTxtPreView(String text) {
		txtPreView.setText(text);
	}

	public void init() {
		try {
			if(flag != 0) {
				lblInfo.setText(DBConnect.user);
				btnLogin.setVisible(false);
				btnLogout.setVisible(true);
				setTable();
			} else {
				lblInfo.setText("로그인을 하시오");
				btnLogin.setVisible(true);
				btnLogout.setVisible(false);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		init();		
	}

}
