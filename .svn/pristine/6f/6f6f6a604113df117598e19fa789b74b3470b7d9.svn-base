package file;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.StringWriter;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.stage.Stage;
import main.MainController;

import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader;

import util.ComUtil;
import config.DBConnect;

public class FileController implements Initializable {

	@FXML 	private TextField 	packageName;
    @FXML	private CheckBox 	controller;
    @FXML 	private CheckBox 	dao;
    @FXML 	private CheckBox 	service;
    @FXML 	private CheckBox 	xml;
    @FXML 	private CheckBox 	dto;
    
    public Stage currentStage;
    public MainController mainController;
    
    public static final String TEMPLATE_PATH = "/template";
	public static final String SRC_PATH = "D:/workspace/workspace-java-expert/SGWannabe/src";
	
	/**
     * 1. 메소드명 : fileCreate
     * 2. 작성일 : 2015. 8. 19. 오후 2:48:33
     * 3. 작성자 : 박훈범
     * 4. 설명 :	생성 메소드 구현
     * @param event
     * @throws Exception
     */
    @FXML   
    void fileCreate(ActionEvent event) throws Exception {
    	
    	String tableName = mainController.getTblTableInfo().getTableName();
    	
    	System.out.println(tableName);
        System.out.println(packageName.getText().charAt(0));
    
    		if((packageName.getText().charAt(0)>='A'&&packageName.getText().charAt(0)<='Z')||(packageName.getText().charAt(0)>='a'&&packageName.getText().charAt(0)<='z')){
    	try {
        	// controller 체크박스가 true 면 writeTempleate 메소드 호출
        	if(controller.isSelected()) {				
        		writeTemplate("Controller", tableName);
        	}
        	
        	// dao 체크박스가 true 면 writeTempleate 메소드 호출
        	if(dao.isSelected()) {					
        		writeTemplate("Dao", tableName);
        	}
        	
        	// service 체크박스가 true 면 writeTempleate 메소드 호출
        	if(service.isSelected()) {				
        		writeTemplate("Service", tableName);
        	}
        	
        	// dto 체크박스가 true 면 writeTempleate 메소드 호출
        	if(dto.isSelected()) {					
        		writeTemplate("Dto", tableName);
        	}
        	
        	// xml 체크박스가 true 면 writeTempleate 메소드 호출
        	if(xml.isSelected()) {					
        		writeTemplate("xml", tableName);
        	}
        	
        	ComUtil.alert("파일이 생성되었습니다.");
        	
		} catch (Exception e) {
			e.printStackTrace();
			ComUtil.alert("파일을 생성하는데 실패하였습니다.");
		}
    }else{
    	ComUtil.alert("잘못 입력 하셨습니다. 다시 입력 하세요.");
    	return;
    	
    }
    }
    
    /**
     * 1. 메소드명 : writeTemplate
     * 2. 작성일 : 2015. 8. 19. 오후 2:48:05
     * 3. 작성자 : 박훈범
     * 4. 설명 :	파일 생성 메소드
     * @param fileType
     * @param tableName
     * @throws Exception
     */
    public  void writeTemplate(String fileType, String tableName) throws Exception {
		
		// 아래의 내용은 velocity를 사용하기 위해서 꼭 해줘야 하는 설정
		VelocityEngine ve = new VelocityEngine();
		ve.setProperty("resource.loader", "classpath");
		ve.setProperty("classpath.resource.loader.class",
				ClasspathResourceLoader.class.getName());
		ve.setProperty("input.encoding", "UTF-8");
		ve.init();
		

		// 템플릿 파일 읽기
		Template t = null;	

		if (fileType.equals("Controller")) {
			t = ve.getTemplate(TEMPLATE_PATH + "/controller.vm");
		} else if (fileType.equals("Service")) {
			t = ve.getTemplate(TEMPLATE_PATH + "/service.vm");
		} else if (fileType.equals("Dao")) {
			t = ve.getTemplate(TEMPLATE_PATH + "/dao.vm");
		} else if (fileType.equals("Dto")) {
			t = ve.getTemplate(TEMPLATE_PATH + "/dto.vm");
		} else if (fileType.equals("xml")) {
			t = ve.getTemplate(TEMPLATE_PATH + "/xml.vm");
		}
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		map.put("packageName"	, packageName.getText()); 
		map.put("methodName"	, packageName.getText());
		map.put("bizName"		, packageName.getText().substring(0, 1).toUpperCase() + packageName.getText().substring(1));
		map.put("tableName"		, tableName);
		
		String[] col = null;
		String[] var = null;
		String[] method = null;
		int colCnt = 0;
		
		Connection conn;

		try {
			conn = DBConnect.connect();
			
			String sql = "select * from " + tableName;
			ResultSet rs = conn.createStatement().executeQuery(sql);
			
			colCnt = rs.getMetaData().getColumnCount();
			col = new String[colCnt];
			var = new String[colCnt];
			method = new String[colCnt];
			
			for (int i = 0; i < colCnt; i++) {
				col[i] = rs.getMetaData().getColumnName(i + 1);
				var[i] = getCamelNotation(rs.getMetaData().getColumnName(i + 1), "_");
				method[i] = getPascalNotation(rs.getMetaData().getColumnName(i + 1), "_");
			}
			
			
		} catch (SQLException e) {
					e.printStackTrace();
				}
		//해당 velocity 의 vars 변수에 값 전달
		map.put("cols",col);
		map.put("vars",var);
		map.put("methods",method);
		map.put("colCnt", colCnt-1);
		
		// 템플릿과 데이터 합치기
		VelocityContext context = new VelocityContext(map);

		StringWriter writer = new StringWriter();
		t.merge(context, writer);

		// 콘솔 출력
		System.out.println(writer.toString());

		// --------
		// 파일로 저장
		// -------
		
		//저장될 패키지 경로 설정
		String dirName = SRC_PATH + "/" + packageName.getText() + "/";
		
		// /src/velocity/sample3/(bizName)+(fileType).java 가 생성
		String fileName;
		
		if(fileType.equals("xml")){
			fileName = dirName + packageName.getText() + ".xml";
		} else{
			fileName = dirName + packageName.getText().substring(0, 1).toUpperCase() + packageName.getText().substring(1) + fileType + ".java";
		}

		// 디렉토리가 존재하는지 체크
		File dir = new File(dirName);
		
		if (!dir.exists()) {
			dir.mkdirs();
		}

		BufferedWriter bw = new BufferedWriter(new FileWriter(fileName));

		t.merge(context, bw);
		bw.flush();
		bw.close();
				
		this.currentStage.close();
		
		
	}
    
    @FXML    
    void cancel(ActionEvent event) {
    	this.currentStage.close();
    }
    
    
    /**
     * 1. 메소드명 : getCamelNotation
     * 2. 작성일 : 2015. 8. 20. 오후 7:53:26
     * 3. 작성자 : 배진상
     * 4. 설명 : 카멜표기법으로 변환
     * @param str
     * @param seperator
     * @return
     */
    public static String getCamelNotation(String str, String seperator) {
		StringBuffer retVal = new StringBuffer();
		if (!str.isEmpty()) {
			String[] strArr = str.split(seperator);
			for (int idx = 0; idx < strArr.length; idx++) {
				if (idx == 0) {
					retVal.append(strArr[idx].toLowerCase());
				} else {
					retVal.append(strArr[idx].toUpperCase().charAt(0) + strArr[idx].toLowerCase().substring(1));
				}
			}
		}
		return retVal.toString();
	}
	

    /**
	 * 1. 메소드명 : getPascalNotation
	 * 2. 작성일 : 2015. 8. 20. 오후 7:53:43
	 * 3. 작성자 : 배진상
	 * 4. 설명 : 파스칼 표기법으로 변환
	 * @param str
	 * @param seperator
	 * @return
	 */
	public static String getPascalNotation(String str, String seperator) {
		StringBuffer retVal = new StringBuffer();
		if(!str.isEmpty()) {
			String[] strArr = str.split(seperator);
			for(int idx = 0; idx < strArr.length ; idx++) {
				retVal.append(strArr[idx].toUpperCase().charAt(0) + strArr[idx].toLowerCase().substring(1));
			}
		}
		return retVal.toString();
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
	}
}
